/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.asset_tracker_schema.tables;


import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.asset_tracker_schema.AssetTrackerSchema;
import org.jooq.generated.asset_tracker_schema.Keys;
import org.jooq.generated.asset_tracker_schema.tables.records.CurrencyRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Currency extends TableImpl<CurrencyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>asset_tracker_schema.currency</code>
     */
    public static final Currency CURRENCY = new Currency();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CurrencyRecord> getRecordType() {
        return CurrencyRecord.class;
    }

    /**
     * The column <code>asset_tracker_schema.currency.id</code>.
     */
    public final TableField<CurrencyRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>asset_tracker_schema.currency.code</code>.
     */
    public final TableField<CurrencyRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(3).nullable(false), this, "");

    /**
     * The column <code>asset_tracker_schema.currency.description</code>.
     */
    public final TableField<CurrencyRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    private Currency(Name alias, Table<CurrencyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Currency(Name alias, Table<CurrencyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>asset_tracker_schema.currency</code> table
     * reference
     */
    public Currency(String alias) {
        this(DSL.name(alias), CURRENCY);
    }

    /**
     * Create an aliased <code>asset_tracker_schema.currency</code> table
     * reference
     */
    public Currency(Name alias) {
        this(alias, CURRENCY);
    }

    /**
     * Create a <code>asset_tracker_schema.currency</code> table reference
     */
    public Currency() {
        this(DSL.name("currency"), null);
    }

    public <O extends Record> Currency(Table<O> child, ForeignKey<O, CurrencyRecord> key) {
        super(child, key, CURRENCY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AssetTrackerSchema.ASSET_TRACKER_SCHEMA;
    }

    @Override
    public Identity<CurrencyRecord, Long> getIdentity() {
        return (Identity<CurrencyRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CurrencyRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_2;
    }

    @Override
    public Currency as(String alias) {
        return new Currency(DSL.name(alias), this);
    }

    @Override
    public Currency as(Name alias) {
        return new Currency(alias, this);
    }

    @Override
    public Currency as(Table<?> alias) {
        return new Currency(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Currency rename(String name) {
        return new Currency(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Currency rename(Name name) {
        return new Currency(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Currency rename(Table<?> name) {
        return new Currency(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

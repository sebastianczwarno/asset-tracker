/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.asset_tracker_schema.tables;


import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.asset_tracker_schema.AssetTrackerSchema;
import org.jooq.generated.asset_tracker_schema.Keys;
import org.jooq.generated.asset_tracker_schema.tables.records.AssetPriceUnderWalletRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AssetPriceUnderWallet extends TableImpl<AssetPriceUnderWalletRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>asset_tracker_schema.asset_price_under_wallet</code>
     */
    public static final AssetPriceUnderWallet ASSET_PRICE_UNDER_WALLET = new AssetPriceUnderWallet();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AssetPriceUnderWalletRecord> getRecordType() {
        return AssetPriceUnderWalletRecord.class;
    }

    /**
     * The column <code>asset_tracker_schema.asset_price_under_wallet.id</code>.
     */
    public final TableField<AssetPriceUnderWalletRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>asset_tracker_schema.asset_price_under_wallet.wallet_id</code>.
     */
    public final TableField<AssetPriceUnderWalletRecord, Long> WALLET_ID = createField(DSL.name("wallet_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>asset_tracker_schema.asset_price_under_wallet.asset_name</code>.
     */
    public final TableField<AssetPriceUnderWalletRecord, String> ASSET_NAME = createField(DSL.name("asset_name"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column
     * <code>asset_tracker_schema.asset_price_under_wallet.currency_code</code>.
     */
    public final TableField<AssetPriceUnderWalletRecord, String> CURRENCY_CODE = createField(DSL.name("currency_code"), SQLDataType.VARCHAR(3).nullable(false), this, "");

    /**
     * The column
     * <code>asset_tracker_schema.asset_price_under_wallet.price</code>.
     */
    public final TableField<AssetPriceUnderWalletRecord, BigInteger> PRICE = createField(DSL.name("price"), SQLDataType.DECIMAL_INTEGER(100000).nullable(false), this, "");

    private AssetPriceUnderWallet(Name alias, Table<AssetPriceUnderWalletRecord> aliased) {
        this(alias, aliased, null);
    }

    private AssetPriceUnderWallet(Name alias, Table<AssetPriceUnderWalletRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>asset_tracker_schema.asset_price_under_wallet</code> table
     * reference
     */
    public AssetPriceUnderWallet(String alias) {
        this(DSL.name(alias), ASSET_PRICE_UNDER_WALLET);
    }

    /**
     * Create an aliased
     * <code>asset_tracker_schema.asset_price_under_wallet</code> table
     * reference
     */
    public AssetPriceUnderWallet(Name alias) {
        this(alias, ASSET_PRICE_UNDER_WALLET);
    }

    /**
     * Create a <code>asset_tracker_schema.asset_price_under_wallet</code> table
     * reference
     */
    public AssetPriceUnderWallet() {
        this(DSL.name("asset_price_under_wallet"), null);
    }

    public <O extends Record> AssetPriceUnderWallet(Table<O> child, ForeignKey<O, AssetPriceUnderWalletRecord> key) {
        super(child, key, ASSET_PRICE_UNDER_WALLET);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AssetTrackerSchema.ASSET_TRACKER_SCHEMA;
    }

    @Override
    public Identity<AssetPriceUnderWalletRecord, Long> getIdentity() {
        return (Identity<AssetPriceUnderWalletRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AssetPriceUnderWalletRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_6;
    }

    @Override
    public List<ForeignKey<AssetPriceUnderWalletRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_ASSET_PRICE_UNDER_WALLET_WALLET);
    }

    private transient Wallet _wallet;

    /**
     * Get the implicit join path to the
     * <code>asset_tracker_schema.wallet</code> table.
     */
    public Wallet wallet() {
        if (_wallet == null)
            _wallet = new Wallet(this, Keys.FK_ASSET_PRICE_UNDER_WALLET_WALLET);

        return _wallet;
    }

    @Override
    public AssetPriceUnderWallet as(String alias) {
        return new AssetPriceUnderWallet(DSL.name(alias), this);
    }

    @Override
    public AssetPriceUnderWallet as(Name alias) {
        return new AssetPriceUnderWallet(alias, this);
    }

    @Override
    public AssetPriceUnderWallet as(Table<?> alias) {
        return new AssetPriceUnderWallet(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AssetPriceUnderWallet rename(String name) {
        return new AssetPriceUnderWallet(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AssetPriceUnderWallet rename(Name name) {
        return new AssetPriceUnderWallet(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AssetPriceUnderWallet rename(Table<?> name) {
        return new AssetPriceUnderWallet(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, String, String, BigInteger> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super Long, ? super String, ? super String, ? super BigInteger, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super Long, ? super String, ? super String, ? super BigInteger, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
